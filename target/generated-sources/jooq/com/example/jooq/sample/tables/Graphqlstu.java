/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.sample.tables;


import com.example.jooq.sample.Test;
import com.example.jooq.sample.tables.records.GraphqlstuRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Graphqlstu extends TableImpl<GraphqlstuRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>test.graphqlstu</code>
     */
    public static final Graphqlstu GRAPHQLSTU = new Graphqlstu();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GraphqlstuRecord> getRecordType() {
        return GraphqlstuRecord.class;
    }

    /**
     * The column <code>test.graphqlstu.id</code>.
     */
    public final TableField<GraphqlstuRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(20).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>test.graphqlstu.name</code>.
     */
    public final TableField<GraphqlstuRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>test.graphqlstu.subject</code>.
     */
    public final TableField<GraphqlstuRecord, String> SUBJECT = createField(DSL.name("subject"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>test.graphqlstu.marks</code>.
     */
    public final TableField<GraphqlstuRecord, String> MARKS = createField(DSL.name("marks"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>test.graphqlstu.grade</code>.
     */
    public final TableField<GraphqlstuRecord, String> GRADE = createField(DSL.name("grade"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    private Graphqlstu(Name alias, Table<GraphqlstuRecord> aliased) {
        this(alias, aliased, null);
    }

    private Graphqlstu(Name alias, Table<GraphqlstuRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>test.graphqlstu</code> table reference
     */
    public Graphqlstu(String alias) {
        this(DSL.name(alias), GRAPHQLSTU);
    }

    /**
     * Create an aliased <code>test.graphqlstu</code> table reference
     */
    public Graphqlstu(Name alias) {
        this(alias, GRAPHQLSTU);
    }

    /**
     * Create a <code>test.graphqlstu</code> table reference
     */
    public Graphqlstu() {
        this(DSL.name("graphqlstu"), null);
    }

    public <O extends Record> Graphqlstu(Table<O> child, ForeignKey<O, GraphqlstuRecord> key) {
        super(child, key, GRAPHQLSTU);
    }

    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    @Override
    public Graphqlstu as(String alias) {
        return new Graphqlstu(DSL.name(alias), this);
    }

    @Override
    public Graphqlstu as(Name alias) {
        return new Graphqlstu(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Graphqlstu rename(String name) {
        return new Graphqlstu(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Graphqlstu rename(Name name) {
        return new Graphqlstu(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
