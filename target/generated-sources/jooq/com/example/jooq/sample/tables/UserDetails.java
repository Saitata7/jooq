/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.sample.tables;


import com.example.jooq.sample.Test;
import com.example.jooq.sample.tables.records.UserDetailsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserDetails extends TableImpl<UserDetailsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>test.user_details</code>
     */
    public static final UserDetails USER_DETAILS = new UserDetails();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserDetailsRecord> getRecordType() {
        return UserDetailsRecord.class;
    }

    /**
     * The column <code>test.user_details.id</code>.
     */
    public final TableField<UserDetailsRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(100).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>test.user_details.username</code>.
     */
    public final TableField<UserDetailsRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>test.user_details.password</code>.
     */
    public final TableField<UserDetailsRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>test.user_details.subject</code>.
     */
    public final TableField<UserDetailsRecord, String> SUBJECT = createField(DSL.name("subject"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    private UserDetails(Name alias, Table<UserDetailsRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserDetails(Name alias, Table<UserDetailsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>test.user_details</code> table reference
     */
    public UserDetails(String alias) {
        this(DSL.name(alias), USER_DETAILS);
    }

    /**
     * Create an aliased <code>test.user_details</code> table reference
     */
    public UserDetails(Name alias) {
        this(alias, USER_DETAILS);
    }

    /**
     * Create a <code>test.user_details</code> table reference
     */
    public UserDetails() {
        this(DSL.name("user_details"), null);
    }

    public <O extends Record> UserDetails(Table<O> child, ForeignKey<O, UserDetailsRecord> key) {
        super(child, key, USER_DETAILS);
    }

    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    @Override
    public UserDetails as(String alias) {
        return new UserDetails(DSL.name(alias), this);
    }

    @Override
    public UserDetails as(Name alias) {
        return new UserDetails(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserDetails rename(String name) {
        return new UserDetails(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserDetails rename(Name name) {
        return new UserDetails(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
