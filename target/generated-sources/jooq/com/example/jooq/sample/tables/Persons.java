/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.sample.tables;


import com.example.jooq.sample.Test;
import com.example.jooq.sample.tables.records.PersonsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Persons extends TableImpl<PersonsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>test.persons</code>
     */
    public static final Persons PERSONS = new Persons();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PersonsRecord> getRecordType() {
        return PersonsRecord.class;
    }

    /**
     * The column <code>test.persons.id</code>.
     */
    public final TableField<PersonsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.defaultValue(DSL.inline("NULL", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>test.persons.productname</code>.
     */
    public final TableField<PersonsRecord, String> PRODUCTNAME = createField(DSL.name("productname"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>test.persons.brandname</code>.
     */
    public final TableField<PersonsRecord, String> BRANDNAME = createField(DSL.name("brandname"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>test.persons.cost</code>.
     */
    public final TableField<PersonsRecord, Integer> COST = createField(DSL.name("cost"), SQLDataType.INTEGER.nullable(false), this, "");

    private Persons(Name alias, Table<PersonsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Persons(Name alias, Table<PersonsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>test.persons</code> table reference
     */
    public Persons(String alias) {
        this(DSL.name(alias), PERSONS);
    }

    /**
     * Create an aliased <code>test.persons</code> table reference
     */
    public Persons(Name alias) {
        this(alias, PERSONS);
    }

    /**
     * Create a <code>test.persons</code> table reference
     */
    public Persons() {
        this(DSL.name("persons"), null);
    }

    public <O extends Record> Persons(Table<O> child, ForeignKey<O, PersonsRecord> key) {
        super(child, key, PERSONS);
    }

    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    @Override
    public Persons as(String alias) {
        return new Persons(DSL.name(alias), this);
    }

    @Override
    public Persons as(Name alias) {
        return new Persons(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Persons rename(String name) {
        return new Persons(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Persons rename(Name name) {
        return new Persons(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
